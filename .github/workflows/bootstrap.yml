name: Android CI — Build installable APK

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      ANDROID_HOME: ${{ github.workspace }}/android-sdk
      JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF-8
      GRADLE_OPTS: -Dorg.gradle.jvmargs="-Xmx2g -Dfile.encoding=UTF-8"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java 17 (Temurin)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: 'gradle'

      - name: Install Android SDK tools (cmdline-tools)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$ANDROID_HOME"
          curl -sLo /tmp/cmdline-tools.zip https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip
          unzip -q /tmp/cmdline-tools.zip -d "$ANDROID_HOME/cmdline-tools"
          mv "$ANDROID_HOME/cmdline-tools/cmdline-tools" "$ANDROID_HOME/cmdline-tools/latest"
          echo "$ANDROID_HOME/cmdline-tools/latest/bin" >> "$GITHUB_PATH"
          echo "$ANDROID_HOME/platform-tools" >> "$GITHUB_PATH"

      - name: Accept licenses & install SDK packages
        shell: bash
        run: |
          set -euo pipefail
          SDKM="$ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager"
          yes | "$SDKM" --sdk_root="$ANDROID_HOME" --licenses >/dev/null || true
          "$SDKM" --sdk_root="$ANDROID_HOME" \
            "platform-tools" \
            "platforms;android-34" \
            "build-tools;34.0.0"

      - name: Write local.properties (sdk.dir)
        shell: bash
        run: |
          echo "sdk.dir=$ANDROID_HOME" > local.properties
          cat local.properties

      # ✅ ไม่ใช้ sdkman แล้ว — ดาวน์โหลด Gradle zip มากางแล้วสั่ง wrapper โดยตรง
      - name: Bootstrap Gradle wrapper if missing/broken
        shell: bash
        run: |
          set -eo pipefail
          need=0
          [ ! -f ./gradlew ] && need=1
          if [ -f ./gradlew ] && ! head -1 ./gradlew | grep -q '^#!'; then
            need=1
          fi
          if [ "$need" -eq 1 ]; then
            echo "Downloading Gradle 8.9 to generate wrapper..."
            GRADLE_VER=8.9
            TMP="$RUNNER_TEMP/gradle"
            mkdir -p "$TMP"
            curl -sL "https://services.gradle.org/distributions/gradle-${GRADLE_VER}-bin.zip" -o "$TMP/gradle.zip"
            unzip -q "$TMP/gradle.zip" -d "$TMP"
            "$TMP/gradle-${GRADLE_VER}/bin/gradle" wrapper --gradle-version ${GRADLE_VER}
          fi
          chmod +x ./gradlew

      - name: Setup Gradle cache
        uses: gradle/actions/setup-gradle@v4
        with:
          validate-wrappers: false
          gradle-home-cache-cleanup: true

      - name: Kill Gradle & clean
        shell: bash
        run: |
          set +e
          ./gradlew --stop
          set -e
          ./gradlew clean --no-daemon

      - name: Build Debug APK (installable)
        shell: bash
        run: |
          set -euo pipefail
          ./gradlew --no-daemon -Dorg.gradle.console=plain --warning-mode=all --stacktrace --info :app:assembleDebug 2>&1 | tee build.log

      - name: Upload build log (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-log
          path: build.log

      - name: Upload APK (on success)
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: app-debug
          path: app/build/outputs/apk/debug/*.apk
