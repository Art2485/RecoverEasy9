name: Bootstrap Android Project, Build & Release APK

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      ANDROID_HOME: ${{ github.workspace }}/android-sdk
      JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF-8
      GRADLE_OPTS: -Dorg.gradle.jvmargs="-Xmx2g -Dfile.encoding=UTF-8"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Install Android SDK cmdline-tools
        shell: bash
        run: |
          set -euxo pipefail
          mkdir -p "${ANDROID_HOME}"
          curl -sLo /tmp/cmdline-tools.zip https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip
          unzip -q /tmp/cmdline-tools.zip -d "${ANDROID_HOME}/cmdline-tools"
          mv "${ANDROID_HOME}/cmdline-tools/cmdline-tools" "${ANDROID_HOME}/cmdline-tools/latest"
          echo "${ANDROID_HOME}/cmdline-tools/latest/bin" >> "$GITHUB_PATH"
          echo "${ANDROID_HOME}/platform-tools" >> "$GITHUB_PATH"

      - name: Accept licenses & install SDK packages
        shell: bash
        run: |
          set -euxo pipefail
          SDKM="${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager"
          yes | "$SDKM" --sdk_root="${ANDROID_HOME}" --licenses >/dev/null || true
          "$SDKM" --sdk_root="${ANDROID_HOME}" \
            "platform-tools" \
            "platforms;android-34" \
            "build-tools;34.0.0"

      - name: Write local.properties
        shell: bash
        run: echo "sdk.dir=${ANDROID_HOME}" > local.properties

      # >>> สำคัญ: ทำให้ gradlew รันได้ (แก้ exit 127)
      - name: Make gradlew executable
        shell: bash
        run: |
          if [ -f ./gradlew ]; then
            chmod +x ./gradlew
          fi
          ls -l ./gradlew || true

      - name: Build Debug APK (with wrapper fallback)
        shell: bash
        run: |
          set -o pipefail
          echo "Check wrapper"; ls -l ./gradlew || true
          if [ -x ./gradlew ]; then
            ./gradlew --no-daemon -Dorg.gradle.console=plain --warning-mode=all --stacktrace --info clean :app:assembleDebug 2>&1 | tee build.log
            code=${PIPESTATUS[0]}
          else
            echo "Wrapper not executable/not found — using SDKMAN Gradle fallback"
            curl -s "https://get.sdkman.io" | bash
            source "$HOME/.sdkman/bin/sdkman-init.sh"
            sdk install gradle 8.9 >/dev/null
            gradle --version
            ( [ -f settings.gradle ] || [ -f settings.gradle.kts ] ) && gradle wrapper --gradle-version 8.9 || true
            if [ -x ./gradlew ]; then
              chmod +x ./gradlew
              ./gradlew --no-daemon -Dorg.gradle.console=plain --warning-mode=all --stacktrace --info clean :app:assembleDebug 2>&1 | tee build.log
              code=${PIPESTATUS[0]}
            else
              gradle --no-daemon -Dorg.gradle.console=plain --warning-mode=all --stacktrace --info clean :app:assembleDebug 2>&1 | tee build.log
              code=${PIPESTATUS[0]}
            fi
          fi
          echo "Gradle exit code: $code"
          exit $code

      - name: Upload APK (if exists)
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: app-debug
          path: app/build/outputs/apk/debug/*.apk

      - name: Upload build log (always)
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: build-log
          path: build.log

      - name: Extract first error block (always)
        if: ${{ always() }}
        shell: bash
        run: |
          mkdir -p build-logs
          idx=$(grep -n '^ *e: ' build.log | head -n1 | cut -d: -f1 || true)
          if [ -n "$idx" ]; then
            start=$(( idx>120 ? idx-120 : 1 ))
            end=$(( idx+200 ))
            nl -ba build.log | sed -n "${start},${end}p" > build-logs/error-context.txt
          else
            echo "No 'e:' lines found" > build-logs/error-context.txt
          fi
          tail -n 400 build.log > build-logs/console-tail.txt

      - name: Upload parsed errors (always)
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: build-errors
          path: build-logs/
