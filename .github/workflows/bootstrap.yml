name: Bootstrap Android Project, Build & Release APK

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]

permissions:
  contents: write

jobs:
  bootstrap:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Install Android SDK components
        run: sdkmanager "platform-tools" "platforms;android-34" "build-tools;34.0.0"

      - name: Gradle cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # ---------- เขียนไฟล์โปรเจ็กต์ทั้งหมด (วางทับ) ----------
      - name: Write project files
        run: |
          set -e
          mkdir -p app/src/main/java/com/recovereasy
          mkdir -p app/src/main/res/{layout,values,drawable,mipmap-anydpi-v26}
          mkdir -p gradle/wrapper

          cat > gradle.properties << 'EOF'
          org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8
          android.useAndroidX=true
          kotlin.code.style=official
          EOF

          cat > settings.gradle.kts << 'EOF'
          pluginManagement { repositories { google(); mavenCentral(); gradlePluginPortal() } }
          dependencyResolutionManagement {
            repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
            repositories { google(); mavenCentral() }
          }
          rootProject.name = "RecoverEasy"
          include(":app")
          EOF

          cat > build.gradle.kts << 'EOF'
          plugins {
            id("com.android.application") version "8.5.2" apply false
            kotlin("android") version "1.9.24" apply false
          }
          EOF

          cat > app/build.gradle.kts << 'EOF'
          plugins {
            id("com.android.application")
            kotlin("android")
          }
          android {
            namespace = "com.recovereasy"
            compileSdk = 34
            defaultConfig {
              applicationId = "com.recovereasy"
              minSdk = 24
              targetSdk = 34
              versionCode = 1
              versionName = "1.0"
            }
            buildTypes {
              debug { isDebuggable = true }
              release {
                isMinifyEnabled = false
                proguardFiles(getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro")
              }
            }
            // ปิด viewBinding เพื่อตัดจุดเสี่ยงการ generate โค้ด
            buildFeatures { }
            compileOptions {
              sourceCompatibility = JavaVersion.VERSION_17
              targetCompatibility = JavaVersion.VERSION_17
            }
            kotlinOptions { jvmTarget = "17" }
          }
          dependencies {
            implementation("androidx.core:core-ktx:1.13.1")
            implementation("androidx.appcompat:appcompat:1.7.0")
            implementation("com.google.android.material:material:1.12.0")
            implementation("androidx.recyclerview:recyclerview:1.3.2")
            implementation("androidx.activity:activity-ktx:1.9.2")
            implementation("androidx.lifecycle:lifecycle-runtime-ktx:2.8.4")
            implementation("io.coil-kt:coil:2.6.0")
          }
          EOF

          cat > app/proguard-rules.pro << 'EOF'
          # empty
          EOF

          cat > app/src/main/AndroidManifest.xml << 'EOF'
          <manifest xmlns:android="http://schemas.android.com/apk/res/android" package="com.recovereasy">
            <uses-permission android:name="android.permission.READ_MEDIA_IMAGES" />
            <uses-permission android:name="android.permission.READ_MEDIA_VIDEO" />
            <uses-permission android:name="android.permission.READ_MEDIA_AUDIO" />
            <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" android:maxSdkVersion="32" />
            <application
              android:allowBackup="true"
              android:label="@string/app_name"
              android:icon="@mipmap/ic_launcher"
              android:roundIcon="@mipmap/ic_launcher"
              android:theme="@style/Theme.RecoverEasy">
              <activity android:name=".MainActivity" android:exported="true">
                <intent-filter>
                  <action android:name="android.intent.action.MAIN" />
                  <category android:name="android.intent.category.LAUNCHER" />
                </intent-filter>
              </activity>
            </application>
          </manifest>
          EOF

          cat > app/src/main/res/values/strings.xml << 'EOF'
          <resources>
            <string name="app_name">RecoverEasy</string>
            <string name="images">Images</string>
            <string name="videos">Videos</string>
            <string name="audios">Audio</string>
            <string name="ready">Ready</string>
          </resources>
          EOF

          cat > app/src/main/res/values/colors.xml << 'EOF'
          <resources>
            <color name="primary">#6750A4</color>
            <color name="onPrimary">#FFFFFF</color>
            <color name="background">#FFFFFF</color>
            <color name="onBackground">#000000</color>
            <color name="ic_launcher_background">#2A2A2A</color>
          </resources>
          EOF

          cat > app/src/main/res/values/themes.xml << 'EOF'
          <resources xmlns:tools="http://schemas.android.com/tools">
            <style name="Theme.RecoverEasy" parent="Theme.MaterialComponents.DayNight.NoActionBar">
              <item name="colorPrimary">@color/primary</item>
              <item name="android:statusBarColor" tools:targetApi="l">?attr/colorPrimary</item>
            </style>
          </resources>
          EOF

          cat > app/src/main/res/layout/activity_main.xml << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
              xmlns:app="http://schemas.android.com/apk/res-auto"
              android:orientation="vertical" android:layout_width="match_parent" android:layout_height="match_parent">
            <com.google.android.material.appbar.MaterialToolbar
                android:id="@+id/toolbar" android:layout_width="match_parent" android:layout_height="wrap_content"
                app:title="@string/app_name" />
            <LinearLayout android:layout_width="match_parent" android:layout_height="wrap_content"
                android:orientation="horizontal" android:padding="8dp">
              <Button android:id="@+id/btnImages" android:layout_width="0dp" android:layout_height="wrap_content" android:layout_weight="1" android:text="@string/images"/>
              <Button android:id="@+id/btnVideos" android:layout_width="0dp" android:layout_height="wrap_content" android:layout_weight="1" android:text="@string/videos"/>
              <Button android:id="@+id/btnAudios" android:layout_width="0dp" android:layout_height="wrap_content" android:layout_weight="1" android:text="@string/audios"/>
            </LinearLayout>
            <TextView android:id="@+id/status" android:layout_width="match_parent" android:layout_height="wrap_content" android:padding="8dp" android:text="@string/ready"/>
            <androidx.recyclerview.widget.RecyclerView android:id="@+id/recycler" android:layout_width="match_parent" android:layout_height="0dp" android:layout_weight="1"/>
          </LinearLayout>
          EOF

          cat > app/src/main/res/layout/item_media.xml << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
              android:orientation="horizontal" android:padding="8dp"
              android:layout_width="match_parent" android:layout_height="wrap_content">
            <ImageView android:id="@+id/thumb" android:layout_width="64dp" android:layout_height="64dp" android:scaleType="centerCrop"/>
            <LinearLayout android:layout_width="0dp" android:layout_height="match_parent" android:layout_weight="1" android:orientation="vertical" android:paddingStart="12dp">
              <TextView android:id="@+id/title" android:layout_width="wrap_content" android:layout_height="wrap_content" android:textStyle="bold" android:textColor="@color/onBackground" android:text="Title"/>
              <TextView android:id="@+id/subtitle" android:layout_width="wrap_content" android:layout_height="wrap_content" android:textColor="#666666" android:text="detail"/>
            </LinearLayout>
          </LinearLayout>
          EOF

          cat > app/src/main/res/drawable/ic_audio.xml << 'EOF'
          <vector xmlns:android="http://schemas.android.com/apk/res/android"
              android:width="24dp" android:height="24dp" android:viewportWidth="24" android:viewportHeight="24">
            <path android:fillColor="#FF000000" android:pathData="M12,3v10.55a4,4 0,1 1,-2 -3.45V6h4v9.5a6,6 0,1 1,-2 -4.5V3z"/>
          </vector>
          EOF

          cat > app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml << 'EOF'
          <adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
            <background android:drawable="@color/ic_launcher_background"/>
            <foreground android:drawable="@drawable/ic_audio"/>
          </adaptive-icon>
          EOF

          cat > app/src/main/java/com/recovereasy/MediaItem.kt << 'EOF'
          package com.recovereasy
          import android.net.Uri
          data class MediaItem(val uri: Uri, val name: String, val mime: String?, val isAudio: Boolean)
          EOF

          cat > app/src/main/java/com/recovereasy/MediaAdapter.kt << 'EOF'
          package com.recovereasy
          import android.view.LayoutInflater
          import android.view.View
          import android.view.ViewGroup
          import android.widget.ImageView
          import android.widget.TextView
          import androidx.recyclerview.widget.RecyclerView
          import coil.load
          class MediaAdapter(private var items: List<MediaItem>) : RecyclerView.Adapter<MediaAdapter.VH>() {
            fun submit(list: List<MediaItem>) { items = list; notifyDataSetChanged() }
            override fun onCreateViewHolder(parent: ViewGroup, viewType: Int) =
              VH(LayoutInflater.from(parent.context).inflate(R.layout.item_media, parent, false))
            override fun getItemCount() = items.size
            override fun onBindViewHolder(holder: VH, position: Int) {
              val item = items[position]
              holder.title.text = item.name
              holder.subtitle.text = item.mime ?: ""
              if (item.isAudio) holder.thumb.setImageResource(R.drawable.ic_audio)
              else holder.thumb.load(item.uri) { crossfade(true) }
            }
            class VH(v: View): RecyclerView.ViewHolder(v) {
              val thumb: ImageView = v.findViewById(R.id.thumb)
              val title: TextView = v.findViewById(R.id.title)
              val subtitle: TextView = v.findViewById(R.id.subtitle)
            }
          }
          EOF

          cat > app/src/main/java/com/recovereasy/MainActivity.kt << 'EOF'
          package com.recovereasy
          import android.Manifest
          import android.content.ContentUris
          import android.content.pm.PackageManager
          import android.net.Uri
          import android.os.Build
          import android.os.Bundle
          import android.provider.MediaStore
          import android.widget.Button
          import android.widget.RecyclerView
          import android.widget.TextView
          import androidx.activity.result.contract.ActivityResultContracts
          import androidx.appcompat.app.AppCompatActivity
          import androidx.core.content.ContextCompat
          import androidx.recyclerview.widget.LinearLayoutManager
          class MainActivity : AppCompatActivity() {
            private lateinit var recycler: RecyclerView
            private lateinit var status: TextView
            private val adapter = MediaAdapter(emptyList())
            private val permissionLauncher = registerForActivityResult(
              ActivityResultContracts.RequestMultiplePermissions()
            ) { loadImages() }
            override fun onCreate(savedInstanceState: Bundle?) {
              super.onCreate(savedInstanceState)
              setContentView(R.layout.activity_main)
              setSupportActionBar(findViewById(R.id.toolbar))
              recycler = findViewById(R.id.recycler)
              status = findViewById(R.id.status)
              recycler.layoutManager = LinearLayoutManager(this)
              recycler.adapter = adapter
              findViewById<Button>(R.id.btnImages).setOnClickListener { ensurePerms { loadImages() } }
              findViewById<Button>(R.id.btnVideos).setOnClickListener { ensurePerms { loadVideos() } }
              findViewById<Button>(R.id.btnAudios).setOnClickListener { ensurePerms { loadAudios() } }
              ensurePerms { loadImages() }
            }
            private fun ensurePerms(onOk: () -> Unit) {
              val perms = if (Build.VERSION.SDK_INT >= 33)
                arrayOf(Manifest.permission.READ_MEDIA_IMAGES, Manifest.permission.READ_MEDIA_VIDEO, Manifest.permission.READ_MEDIA_AUDIO)
              else arrayOf(Manifest.permission.READ_EXTERNAL_STORAGE)
              val need = perms.any { ContextCompat.checkSelfPermission(this, it) != PackageManager.PERMISSION_GRANTED }
              if (need) permissionLauncher.launch(perms) else onOk()
            }
            private fun loadImages() {
              adapter.submit(query(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,
                arrayOf(MediaStore.Images.Media._ID, MediaStore.Images.Media.DISPLAY_NAME, MediaStore.Images.Media.MIME_TYPE),
                false, MediaStore.Images.Media._ID))
              status.text = getString(R.string.images)
            }
            private fun loadVideos() {
              adapter.submit(query(MediaStore.Video.Media.EXTERNAL_CONTENT_URI,
                arrayOf(MediaStore.Video.Media._ID, MediaStore.Video.Media.DISPLAY_NAME, MediaStore.Video.Media.MIME_TYPE),
                false, MediaStore.Video.Media._ID))
              status.text = getString(R.string.videos)
            }
            private fun loadAudios() {
              adapter.submit(query(MediaStore.Audio.Media.EXTERNAL_CONTENT_URI,
                arrayOf(MediaStore.Audio.Media._ID, MediaStore.Audio.Media.DISPLAY_NAME, MediaStore.Audio.Media.MIME_TYPE),
                true, MediaStore.Audio.Media._ID))
              status.text = getString(R.string.audios)
            }
            private fun query(collection: Uri, projection: Array<String>, isAudio: Boolean, idColumn: String): List<MediaItem> {
              val items = mutableListOf<MediaItem>()
              contentResolver.query(collection, projection, null, null,
                "${MediaStore.MediaColumns.DATE_ADDED} DESC")?.use { c ->
                val idIdx = c.getColumnIndexOrThrow(idColumn)
                val nameIdx = c.getColumnIndexOrThrow(MediaStore.MediaColumns.DISPLAY_NAME)
                val mimeIdx = c.getColumnIndexOrThrow(MediaStore.MediaColumns.MIME_TYPE)
                while (c.moveToNext()) {
                  val id = c.getLong(idIdx)
                  val name = c.getString(nameIdx) ?: ""
                  val mime = c.getString(mimeIdx)
                  items.add(MediaItem(ContentUris.withAppendedId(collection, id), name, mime, isAudio))
                }
              }
              return items
            }
          }
          EOF
      # ---------- จบส่วนเขียนไฟล์ ----------

      - name: Bootstrap Gradle Wrapper (no raw link)
        run: |
          set -e
          curl -sL https://services.gradle.org/distributions/gradle-8.9-bin.zip -o gradle-8.9-bin.zip
          unzip -q gradle-8.9-bin.zip -d $HOME
          $HOME/gradle-8.9/bin/gradle wrapper --gradle-version 8.9
          chmod +x gradlew

      - name: Build Debug APK (installable)
        run: ./gradlew clean :app:assembleDebug --info --stacktrace

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-debug.apk
          path: app/build/outputs/apk/debug/app-debug.apk

      - name: Create GitHub Release and upload APK
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ github.run_number }}
          name: "RecoverEasy v${{ github.run_number }}"
          artifacts: "app/build/outputs/apk/debug/app-debug.apk"
          artifactContentType: application/vnd.android.package-archive
          allowUpdates: true
