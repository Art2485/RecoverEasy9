name: Android CI – Build & Upload APK
on:
  push:

permissions:
  contents: read

env:
  ANDROID_HOME: ${{ github.workspace }}/android-sdk
  ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk
  JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF-8

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Java 17 (Temurin)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      # ล้างเฉพาะตัวแปรที่ชื่อถูกกติกา (ห้ามมีจุด) เพื่อตัด –Xmx… แปลก ๆ
      - name: Neutralize JVM/Gradle opts (safe)
        shell: bash
        run: |
          set -euo pipefail
          to_clear=(JAVA_OPTS JDK_JAVA_OPTIONS _JAVA_OPTIONS GRADLE_OPTS)
          for v in "${to_clear[@]}"; do
            if [[ -n "${!v-}" ]]; then
              echo "Clearing $v"
              printf '%s=\n' "$v" >> "$GITHUB_ENV"
            fi
          done
          # ถ้ามีใครเคยสร้าง ORG_GRADLE_PROJECT_org.gradle.jvmargs ไว้ใน UI
          # เรา *ไม่* เขียนทับ (ชื่อไม่ถูกกติกา) แต่จะคุมผ่าน gradle.properties แทน

      - name: Sanitize gradle.properties dashes/quotes
        shell: bash
        run: |
          set -euo pipefail
          if [[ -f gradle.properties ]]; then
            sed -i 's/–/-/g; s/—/-/g; s/[“”]/"/g; s/[‘’]/'"'"'/g' gradle.properties
            awk '!seen[$1]++' gradle.properties > gradle.properties.tmp && mv gradle.properties.tmp gradle.properties
            echo "------ gradle.properties ------"; cat gradle.properties; echo "--------------------------------"
          fi

      - name: Install Android SDK cmdline-tools
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$ANDROID_HOME"
          cd "$ANDROID_HOME"
          curl -sSLo cmdline-tools.zip "https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip"
          rm -rf cmdline-tools
          mkdir -p cmdline-tools
          unzip -q cmdline-tools.zip -d cmdline-tools-temp
          mkdir -p cmdline-tools/latest
          mv cmdline-tools-temp/cmdline-tools/* cmdline-tools/latest/
          rm -rf cmdline-tools-temp cmdline-tools.zip
          echo "$ANDROID_HOME/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "$ANDROID_HOME/platform-tools" >> $GITHUB_PATH
          echo "$ANDROID_HOME/emulator" >> $GITHUB_PATH

      - name: Accept licenses & install SDK packages (robust)
        shell: bash
        run: |
          set -euo pipefail
          SDKMANAGER="$ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager"
          yes | "$SDKMANAGER" --sdk_root="$ANDROID_HOME" --licenses || true
          "$SDKMANAGER" --sdk_root="$ANDROID_HOME" \
            "platform-tools" \
            "platforms;android-34" "build-tools;34.0.0" \
            "platforms;android-33" "build-tools;33.0.2"

      - name: Write local.properties (sdk.dir)
        shell: bash
        run: |
          set -euo pipefail
          echo "sdk.dir=$ANDROID_HOME" > ./local.properties
          cat ./local.properties

      # ซ่อม gradle-wrapper.jar ให้ตรงกับ distributionUrl
      - name: Repair Gradle wrapper JAR (8.8+ compatible)
        shell: bash
        run: |
          set -euo pipefail
          PROP="gradle/wrapper/gradle-wrapper.properties"
          if [[ ! -f "$PROP" ]]; then echo "Not found: $PROP"; exit 1; fi
          VER=$(sed -n 's#.*distributionUrl=.*gradle-\([0-9.]\+\)-\(bin\|all\)\.zip#\1#p' "$PROP")
          echo "Gradle version: $VER"
          curl -sLo gradle.zip "https://services.gradle.org/distributions/gradle-${VER}-bin.zip"
          JAR_PATH=$(unzip -Z1 gradle.zip | grep -E 'gradle-[^/]+/lib/(plugins/)?gradle-wrapper.*\.jar' | head -n1)
          mkdir -p gradle/wrapper
          unzip -p gradle.zip "$JAR_PATH" > gradle/wrapper/gradle-wrapper.jar
          rm -f gradle.zip
          ls -l gradle/wrapper/gradle-wrapper.jar

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build Debug APK (robust)
        shell: bash
        run: |
          set -euo pipefail
          ./gradlew --stacktrace --warning-mode=all :app:assembleDebug || \
          ./gradlew --stacktrace --warning-mode=all assembleDebug

      - name: List APK outputs
        shell: bash
        run: find . -type f -name "*.apk" -print

      - name: Upload APK(s)
        uses: actions/upload-artifact@v4
        with:
          name: app-debug-apk
          path: |
            **/build/outputs/apk/debug/*.apk
            **/build/outputs/apk/*/debug/*.apk
          if-no-files-found: warn
